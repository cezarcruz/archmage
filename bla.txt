#colors

# Function to check if a package is installed
is_installed() {
  pacman -Qi "$1" &>/dev/null
}

# Function to check if a package is installed
is_group_installed() {
  pacman -Qg "$1" &>/dev/null
}

# Function to install packages using pacman

isKde() {
  [ "$DESKTOP_SESSION" = "plasma" ]
}

update_system() {
  show_info "\nUpdating system..."

  if isNotDryRun; then
    sudo pacman -S --noconfirm
  else
    show_dry_run_warning
  fi

  show_success "\nSystem updated successfully.\n"
}


enable_services() {

  show_info "\nEnabling system services..."

  if isNotDryRun; then
    sudo systemctl enable docker
    sudo systemctl enable reflector.timer
    sudo systemctl enable fstrim.timer
    sudo systemctl enable paccache.timer
  else
    show_info "sudo systemctl enable docker"
    show_info "sudo systemctl enable reflector.timer"
    show_info "sudo systemctl enable fstrim.timer"
    show_info "sudo systemctl enable paccache.timer"
    show_dry_run_warning
  fi

}





configure_home() {

  show_info "\nConfiguring home directory..."

  if isNotDryRun; then    
    cp .gitconfig ~/ #warning: where is my email?
    mkdir -p ~/.config/fontconfig
    cp ./fontconfig/fonts.conf ~/.config/fontconfig/
    cp .mise.toml ~/
    cp -r .ssh ~/
    mkdir -p ~/.config/kitty
    cp ./kitty/kitty.conf ~/.config/kitty/
    cp ./kitty/current-theme.conf ~/.config/kitty/
  else
    show_info "cp .gitconfig ~/"
    show_info "mkdir -p ~/.config/fontconfig"
    show_info "cp ./fontconfig/fonts.conf ~/.config/fontconfig/"
    show_info "cp .mise.toml ~/"
    show_info "cp -r .ssh ~/"
    show_info "mkdir -p ~/.config/kitty"
    show_info "cp ./kitty/kitty.conf ~/.config/kitty/"
    show_info "cp ./kitty/current-theme.conf ~/.config/kitty/"
    show_dry_run_warning
  fi

}

configure_mise() {

  show_info "\nConfiguring Mise..."

  if isNotDryRun; then    
    echo "mise activate fish | source" >> ~/.config/fish/config.fish    
  else
    show_info "echo \"mise activate fish | source\" >> ~/.config/fish/config.fish"
    show_dry_run_warning
  fi
  
}

configure_load_disk() {

  show_info "\nConfiguring load disk..."

  if isNotDryRun; then    
    sudo cp 50-udisks.rules /etc/polkit-1/rules.d/
  else
    show_info "sudo cp 50-udisks.rules /etc/polkit-1/rules.d/"
    show_dry_run_warning
  fi
  
}

garbage_collector() {

  show_info "\nRemoving unnecessary packages..."
  if isNotDryRun; then
    sudo pacman -R htop nano epiphany gnome-tour gnome-console --noconfirm # Remove unnecessary packages and dependencies?
  else
    show_info "sudo pacman -R htop nano epiphany gnome-tour gnome-console --noconfirm"
    show_dry_run_warning
  fi
}

prepare_intellij_home() {

  show_info "\nPreparing IntelliJ home directory..."

  if isNotDryRun; then
    sudo mkdir /opt/jetbrains
    sudo chown -R "$USER" /opt/jetbrains
  else
    show_info "sudo mkdir /opt/jetbrains"
    show_info "sudo chown -R $USER /opt/jetbrains"
    show_dry_run_warning
  fi
  
}

main() {
  update_system
  configure_language
  install_base_packages

  if [ "$DESKTOP_SESSION" = "plasma" ]; then
    show_question "\nDetected KDE Plasma desktop environment. Can you confirm this? (y/n):"
    read -r response
    if [ "$response" = "y" ]; then
      printf "\nProceeding with KDE Plasma setup..."
      install_packages "${KDE_PLASMA_APPS[@]}"
    else
      printf "\nSetupping GNOME desktop environment instead."
      install_packages "${GNOME_APPS[@]}"
    fi
  fi

  enable_services
  configure_chaotic_aur

  install_packages "${AUR_PACKAGES[@]}"

  install_flatpaks
  configure_load_disk
  configure_mise
  prepare_intellij_home
  garbage_collector

}

main
